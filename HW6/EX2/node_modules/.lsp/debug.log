Hello from /home/mountguy/.vscode/extensions/jaredly.reason-vscode-1.3.0/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","refmt":"","lispRefmt":"","format_width":"80","per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","languageId":"ocaml","version":1,"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> Fn (k, (* Fill in here *)App() )\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) )\n  (* Non constant expressions *)\n  | App (e1, e2) -> Fn (k, (* Fill in here *) )\n  | Ifz (e1, e2, e3) -> Fn (k, (* Fill in here *) )\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) -> Fn (k, (* Fill in here *) )\n  | Fst e ->  Fn (k, (* Fill in here *) )\n  | Snd e ->  Fn (k, (* Fill in here *) )\n\nlet cps exp = cps' (alpha_conv exp [])\n\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":46,"character":19},"end":{"line":46,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":2},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(App(Fn(x, cps' e), Var x), Fn(v1, Fn(v3, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 4, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":90,"character":0},"end":{"line":90,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":20,"character":32},"end":{"line":20,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":44},"end":{"line":49,"character":49}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":50,"character":54}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":50,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":50,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":50,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":50,"character":54}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":62}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":63}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":64},"end":{"line":49,"character":64}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":4},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(App(Fn(x, cps' e), Var x), Fn(v1, Fn(, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":5},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(App(Fn(x, cps' e), Var x), Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":63},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 22, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":63},"end":{"line":49,"character":63}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0181198120117ms
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":62}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":62},"end":{"line":49,"character":62}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":61}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":57}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":55},"end":{"line":49,"character":55}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":51},"end":{"line":49,"character":51}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0338554382324ms
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":50},"end":{"line":49,"character":50}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":12},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(App(Fn(x, cps' e),, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 33, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":43},"end":{"line":49,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0171661376953ms
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":13},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(App(Fn(x, cps' e), Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 36, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":42},"end":{"line":49,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0171661376953ms
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":35},"end":{"line":49,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":15},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(App(Fn(cps' e), Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 42, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":32},"end":{"line":49,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0178813934326ms
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":19},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(Appcps' e), Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 45, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":28},"end":{"line":49,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":22},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(cps' e), Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 47, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":25},"end":{"line":49,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0159740447998ms
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":26},"end":{"line":49,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":32},"end":{"line":49,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 53, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":31},"end":{"line":49,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":32},"end":{"line":49,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":23},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 57, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":31},"end":{"line":49,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 58, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0171661376953ms
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":57},"end":{"line":49,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0109672546387ms
Sending response {"id": 61, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":23},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":23}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":40,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":47,"character":30},"end":{"line":47,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":58,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":57,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":57,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":27},"end":{"line":57,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":28},"end":{"line":57,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":26},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(x,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":57,"character":27},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 71, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":27},"end":{"line":57,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":57,"character":68}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 74, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":57,"character":69}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":69},"end":{"line":57,"character":69}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":27},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 77, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":26},"end":{"line":57,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":29},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 80, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":28},"end":{"line":57,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":53,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":53,"character":26},"end":{"line":53,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0119209289551ms
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 86, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":37}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 88, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":37},"end":{"line":49,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 89, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":49,"character":38},"end":{"line":49,"character":38}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Sending response {"id": 91, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":47,"character":30},"end":{"line":47,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":30},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    \n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 93, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":31},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    l\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":48,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00691413879395ms
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":34},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let \n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 96, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0171661376953ms
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":38},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = \n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 98, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0169277191162ms
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":39},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = M\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 100, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":48,"character":13},"end":{"line":48,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0169277191162ms
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":41},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = M0.\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":48,"character":15},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 104, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":48,"character":15},"end":{"line":48,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0159740447998ms
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml","languageId":"ocaml","version":1,"text":"(*\n * SNU 4190.310 Programming Languages \n * Main driver of homework \"Continuation Passing Style\"\n *)\n\nlet main () =\n  let print_m = ref false in\n  let print_cps = ref false in\n  let src = ref \"\" in\n  let _ = \n    Arg.parse \n      [(\"-pp\", Arg.Set print_m, \"Print M0 program\");\n      (\"-pcps\", Arg.Set print_cps, \"Print CPS-converted  program\")\n      ]\n      (fun x -> src := x)\n      \"Usage: ./run [<options>] <M0 file>\"\n  in  \n  \n  let lexbuf = \n    Lexing.from_channel (if !src = \"\" then stdin else open_in !src) \n  in\n  let pgm = Parser.program Lexer.start lexbuf in\n  let _ = print_newline() in\n  if !print_m then (\n    let _ = print_endline \"== Input Program ==\" in\n    let _ = M0.print pgm in\n    print_newline()\n  );\n  let cps_pgm = Cps.cps pgm in\n  if !print_cps then (\n    let _ = print_endline \"== CPS-converted Program ==\" in\n    let _ = M0.print cps_pgm in\n    print_newline()\n  );\n  let _ = print_endline \"== Running Input Program with M0 Interpreter ==\" in\n  let orig_result = M0.run pgm in\n  let _ = \n    match orig_result with\n    |M0.N n -> print_endline (string_of_int n)\n    | _ -> failwith \"Program is not evaluated to a number\"\n  in\n  let _ = print_endline \"== Running converted program with M0 Interpreter ==\" in\n  let cps_result = M0.run (M0.App (cps_pgm, M0.Fn (\"v\", M0.Var \"v\"))) in\n  let _ = \n    match cps_result with\n    |M0.N n -> print_endline (string_of_int n)\n    | _ -> failwith \"Program is not evaluated to a number\"\n  in\n  ()\n\nlet _ = main ()\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 109, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"},"range":{"start":{"line":39,"character":32},"end":{"line":39,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":110}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":41},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = M0.\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 113, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":48,"character":15},"end":{"line":48,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":42},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = M0.p\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":48,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":47},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = M0.print \n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 116, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0219345092773ms
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":48},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = M0.print ()\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":48,"character":22}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.0109672546387ms
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":51},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = M0.print (cps)\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0169277191162ms
Sending response {"id": 119, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":48,"character":25},"end":{"line":48,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":54},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = M0.print (cps' e)\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 122, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":48,"character":28},"end":{"line":48,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0178813934326ms
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":58},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 125, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":48,"character":32},"end":{"line":48,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0169277191162ms
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00810623168945ms
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":58},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = print_string(v1) in\n    let _ = print_string(x) in\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":58}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":47,"character":4},"end":{"line":47,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":46,"character":3},"end":{"line":48,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":59},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 135, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0100135803223ms
Sending response {"id": 136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":59},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":59}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 139, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 140, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":26,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":26,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":26,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 146, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":63,"character":116},"end":{"line":63,"character":116}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":85},"end":{"line":56,"character":85}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":62,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 150, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":50,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":48,"character":57},"end":{"line":48,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":49,"character":64}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":60,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 154, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":65,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":65,"character":27},"end":{"line":65,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 157, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":72,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":73,"character":25},"end":{"line":73,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":64,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 160, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":62,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 162, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":63,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":60},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    \n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 164, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":60,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 167, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":81},"end":{"line":56,"character":81}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 168, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 171, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"},"range":{"start":{"line":39,"character":32},"end":{"line":39,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00715255737305ms
Sending response {"id": 173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":60},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    \n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":60}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml","languageId":"ocaml","version":1,"text":"(*\n * SNU 4190.310 Programming Languages\n * Main driver of homework \"Continuation Passing Style\"\n *)\n\nlet print_m0_value v =\n  match v with\n  |M0.N n -> print_endline (string_of_int n)\n  | _ -> failwith \"Program is not evaluated to a number\"\n\nlet rec check_cps cps_pgm =\n  let check_const exp =\n    match exp with\n    | M0.Num _\n    | M0.Var _\n    | M0.App (M0.Var _, M0.Var _)\n    | M0.Add (M0.Var _, M0.Var _)\n    | M0.Pair (M0.Var _, M0.Var _)\n    | M0.Fst (M0.Var _)\n    | M0.Snd (M0.Var _) -> true\n    | M0.Fn (_, e)\n    | M0.Rec (_, _, e) -> check_cps e\n    | _ -> false\n  in\n  let rec check_cps' exp k =\n    match exp with\n    | M0.App (M0.Var v1, e2) when v1 = k -> check_const e2\n    | M0.App (e1, M0.Var v2) when v2 = k -> check_const e1 || check_cps e1\n    | M0.App (e1, M0.Fn (v, e2)) -> check_cps e1 && check_cps' e2 k\n    | M0.Ifz (M0.Var v1, e2, e3) -> check_cps' e2 k && check_cps' e3 k\n    | _ -> false\n  in\n  match cps_pgm with\n  | M0.Fn (k, exp) -> check_cps' exp k\n  | _ -> false\n\nlet main () =\n  let print_m = ref false in\n  let print_cps = ref false in\n  let check_val = ref false in\n  let check_conv = ref false in\n  let src = ref \"\" in\n  let _ =\n    Arg.parse\n      [(\"-pp\", Arg.Set print_m, \"Print M0 program\");\n      (\"-pcps\", Arg.Set print_cps, \"Print CPS-converted  program\");\n      (\"-checkval\", Arg.Set check_val, \"value check-only with exit code\");\n      (\"-checkcps\", Arg.Set check_conv, \"cps check-only with exit code\");\n      ]\n      (fun x -> src := x)\n      \"Usage: ./run [<options>] <M0 file>\"\n  in\n\n  let lexbuf =\n    Lexing.from_channel (if !src = \"\" then stdin else open_in !src)\n  in\n  let pgm = Parser.program Lexer.start lexbuf in\n\n  (* let _ = print_newline() in *)\n  if !print_m then (\n    let _ = print_endline \"== Input Program ==\" in\n    let _ = M0.print pgm in\n    print_newline()\n  );\n\n  let cps_pgm = Cps.cps pgm in\n  if !print_cps then (\n    let _ = print_endline \"== CPS-converted Program ==\" in\n    let _ = M0.print cps_pgm in\n    print_newline()\n  );\n\n  if !check_conv then (\n    exit (if check_cps cps_pgm then 0 else 1)\n  );\n\n  let orig_result = M0.run pgm in\n  let cps_result = M0.run (M0.App (cps_pgm, M0.Fn (\"v\", M0.Var \"v\"))) in\n\n  if !check_val then (\n    match orig_result, cps_result with\n    | (M0.N n1, M0.N n2) -> exit (if n1 = n2 then 0 else 1)\n    | _ -> failwith \"Program is not evaluated to a number\"\n  );\n\n  let _ = print_endline \"== Running Input Program with M0 Interpreter ==\" in\n  let _ = print_m0_value orig_result in\n\n  let _ = print_endline \"== Running converted program with M0 Interpreter ==\" in\n  let _ = print_m0_value cps_result in\n  ()\n\nlet _ = main ()\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 174, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 176, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 177, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 179, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml","languageId":"ocaml","version":1,"text":"(*\n * SNU 4190.310 Programming Languages \n * M0 Language Definition and Interpreter\n *)\n\ntype mexp = \n  | Num of int\n  | Var of id\n  | Fn of id * mexp\n  | App of mexp * mexp\n  | Rec of id * id * mexp\n  | Ifz of mexp * mexp * mexp\n  | Add of mexp * mexp\n  | Pair of mexp * mexp      (* (e, e) *)\n  | Fst of mexp            (*   e.1  *)\n  | Snd of mexp            (*   e.2  *)\nand id = string\n\ntype value = \n  | N of int\n  | P of value * value\n  | C of closure\nand closure = fexpr * env\nand fexpr = Fun of id * mexp | RecFun of id * id * mexp\nand env = id -> value\n\nexception RunError of string\nexception TypeError of string\n\nlet bind e x v = (fun y -> if y = x then v else e y)\n  \nlet getNum = function \n  | N n -> n \n  | _ -> raise (TypeError \"not an int\")\n\nlet getPair = function \n  | (P (a,b)) -> (a, b) \n  | _ -> raise (TypeError \"not a pair\")\n\nlet getClosure = function \n  | (C c) -> c \n  | _ -> raise (TypeError \"not a function\")\n\nlet rec eval env exp = \n  match exp with\n  | Num n -> N n\n  | Var x -> env x\n  | Fn (x, e) -> C (Fun (x, e), env)\n  | Rec (f, x, e) -> C (RecFun (f, x, e), env)\n  | App (e1, e2) ->\n    let v1 = eval env e1 in\n    let v2 = eval env e2 in\n    let (c, env') = getClosure v1 in\n    (match c with \n    | Fun (x, e) -> eval (bind env' x v2) e\n    | RecFun (f, x, e) ->  \n      let env'' = bind env' x v2 in\n      let env''' = bind env'' f v1 in\n      eval env''' e)\n  | Ifz (e1, e2, e3) ->\n    let v1 = eval env e1 in\n    if getNum v1 = 0 then eval env e2 else eval env e3\n  | Add (e1, e2) -> \n    let v1 = eval env e1 in\n    let v2 = eval env e2 in\n    N (getNum v1 + getNum v2)\n  | Pair (e1, e2) -> \n    let v1 = eval env e1 in\n    let v2 = eval env e2 in\n    P (v1, v2)\n  | Fst e -> \n    let v = eval env e in\n    fst (getPair v)\n  | Snd e -> \n    let v = eval env e in\n    snd (getPair v)\n\nlet emptyEnv = (fun x -> raise (RunError (\"unbound id: \" ^ x)))\n\nlet run : mexp -> value = fun exp -> eval emptyEnv exp\n\nlet ps = print_string\nlet nl = print_newline\nlet indent i =\n  let rec iter = function \n    | 0 -> ()\n    | n -> ps \" \"; iter (n-1)\n  in  \n  nl (); iter i\n  \nlet rec pp n = function \n  | Num i -> print_int i\n  | Var s -> ps s\n  | Fn (x, e) -> ps (\"fn \"^ x ^\" => \"); \n    (match e with\n    | Ifz _ -> indent (n+1); pp (n+1) e\n    | _ -> pp n e)\n  | App (e, e') -> ps \"(\"; pp n e; ps \") (\"; pp n e'; ps \")\"\n  | Ifz (e1, e2, e3)-> \n    ps \"ifzero \"; pp n e1; ps \" then \";\n    indent (n+1); pp (n+1) e2;\n    indent (n); ps \"else\";\n    indent (n+1); pp (n+1) e3\n  | Pair (e1, e2) -> ps \"(\"; pp n e1; ps \", \"; pp n e2; ps \")\"\n  | Fst e -> pp n e; ps \".1\"\n  | Snd e -> pp n e; ps \".2\"\n  | Add (e1, e2) -> ps \"(\"; pp n e1; ps \" + \"; pp n e2; ps \")\"\n  | Rec (f, x, e) -> ps (\"rec \"^f^\" \"^x^\" => \"); pp n e\n\nlet print = pp 0\n\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 181, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 182, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0228881835938ms
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 185, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 186, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 188, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"},"range":{"start":{"line":39,"character":32},"end":{"line":39,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"},"position":{"line":34,"character":76}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 190, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"},"range":{"start":{"line":34,"character":76},"end":{"line":34,"character":76}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"},"position":{"line":25,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"},"range":{"start":{"line":25,"character":27},"end":{"line":25,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 196, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":81},"end":{"line":56,"character":81}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":56,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":57,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":56,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":4},"end":{"line":56,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 201, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":61},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    (Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":56,"character":5}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00596046447754ms
Sending response {"id": 202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":62},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    (*Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 203, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":6},"end":{"line":56,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 204, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":87},"end":{"line":56,"character":87}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 206, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":63},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    (*Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))*\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 207, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":88},"end":{"line":56,"character":88}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":64},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    (*Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))*)\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 209, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":89},"end":{"line":56,"character":89}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":38},"end":{"line":57,"character":38}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":68},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    \n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 213, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":4},"end":{"line":56,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":69},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 216, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":62,"character":26},"end":{"line":62,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00905990600586ms
Sending response {"id": 219, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":69},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    let _ = M0.print (cps' e) in\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":69}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":41,"character":70}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 220, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":44,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":44,"character":26},"end":{"line":44,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":63,"character":116},"end":{"line":63,"character":116}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":59,"character":50}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":59,"character":50}}}
[server] Got a method textDocument/hover
[server] processing took 0.220060348511ms
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":59,"character":49}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":85},"end":{"line":56,"character":85}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":46,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":46,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":46,"character":0},"end":{"line":47,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":46,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0162124633789ms
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":70},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    \n    Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 232, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 235, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 236, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 237, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 238, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":47,"character":4},"end":{"line":47,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":71},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    \n    (Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":5}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00596046447754ms
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 242, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":47,"character":5},"end":{"line":47,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Sending response {"id": 243, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":72},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 244, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":47,"character":6},"end":{"line":47,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 246, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":47,"character":59},"end":{"line":47,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":48,"character":64}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":73},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":74},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 249, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":47,"character":61},"end":{"line":47,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 250, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":75},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n  \n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 252, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":76},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    \n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 254, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":77},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    F\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":45,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 256, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":78},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 257, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":6},"end":{"line":45,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":79},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn()\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":45,"character":7}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00715255737305ms
Sending response {"id": 259, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00476837158203ms
Sending response {"id": 260, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":7},"end":{"line":45,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 261, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":80},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k)\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 263, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":8},"end":{"line":45,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 264, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":81},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn()\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 266, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":7},"end":{"line":45,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 267, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":84},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, )\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 269, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":10},"end":{"line":45,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 270, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":85},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, A)\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 272, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":11},"end":{"line":45,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 273, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":87},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App)\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":88},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App())\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":45,"character":14}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00596046447754ms
Sending response {"id": 275, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 276, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":14},"end":{"line":45,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":95},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, ))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 278, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":21},"end":{"line":45,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 279, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 280, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":97},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 281, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":23},"end":{"line":45,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 282, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":98},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn()))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":45,"character":24}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00500679016113ms
Sending response {"id": 283, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 284, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":24},"end":{"line":45,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 286, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":100},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn(x,)))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 287, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":26},"end":{"line":45,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 289, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":101},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn(x, )))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 290, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":27},"end":{"line":45,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 291, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 292, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":102},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn(x, e)))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 293, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":28},"end":{"line":45,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 295, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00905990600586ms
Sending response {"id": 296, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":102},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn(x, e)))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":102}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml","languageId":"ocaml","version":1,"text":"(*\n * SNU 4190.310 Programming Languages\n * Main driver of homework \"Continuation Passing Style\"\n *)\n\nlet print_m0_value v =\n  match v with\n  |M0.N n -> print_endline (string_of_int n)\n  | _ -> failwith \"Program is not evaluated to a number\"\n\nlet rec check_cps cps_pgm =\n  let check_const exp =\n    match exp with\n    | M0.Num _\n    | M0.Var _\n    | M0.App (M0.Var _, M0.Var _)\n    | M0.Add (M0.Var _, M0.Var _)\n    | M0.Pair (M0.Var _, M0.Var _)\n    | M0.Fst (M0.Var _)\n    | M0.Snd (M0.Var _) -> true\n    | M0.Fn (_, e)\n    | M0.Rec (_, _, e) -> check_cps e\n    | _ -> false\n  in\n  let rec check_cps' exp k =\n    match exp with\n    | M0.App (M0.Var v1, e2) when v1 = k -> check_const e2\n    | M0.App (e1, M0.Var v2) when v2 = k -> check_const e1 || check_cps e1\n    | M0.App (e1, M0.Fn (v, e2)) -> check_cps e1 && check_cps' e2 k\n    | M0.Ifz (M0.Var v1, e2, e3) -> check_cps' e2 k && check_cps' e3 k\n    | _ -> false\n  in\n  match cps_pgm with\n  | M0.Fn (k, exp) -> check_cps' exp k\n  | _ -> false\n\nlet main () =\n  let print_m = ref false in\n  let print_cps = ref false in\n  let check_val = ref false in\n  let check_conv = ref false in\n  let src = ref \"\" in\n  let _ =\n    Arg.parse\n      [(\"-pp\", Arg.Set print_m, \"Print M0 program\");\n      (\"-pcps\", Arg.Set print_cps, \"Print CPS-converted  program\");\n      (\"-checkval\", Arg.Set check_val, \"value check-only with exit code\");\n      (\"-checkcps\", Arg.Set check_conv, \"cps check-only with exit code\");\n      ]\n      (fun x -> src := x)\n      \"Usage: ./run [<options>] <M0 file>\"\n  in\n\n  let lexbuf =\n    Lexing.from_channel (if !src = \"\" then stdin else open_in !src)\n  in\n  let pgm = Parser.program Lexer.start lexbuf in\n\n  (* let _ = print_newline() in *)\n  if !print_m then (\n    let _ = print_endline \"== Input Program ==\" in\n    let _ = M0.print pgm in\n    print_newline()\n  );\n\n  let cps_pgm = Cps.cps pgm in\n  if !print_cps then (\n    let _ = print_endline \"== CPS-converted Program ==\" in\n    let _ = M0.print cps_pgm in\n    print_newline()\n  );\n\n  if !check_conv then (\n    exit (if check_cps cps_pgm then 0 else 1)\n  );\n\n  let orig_result = M0.run pgm in\n  let cps_result = M0.run (M0.App (cps_pgm, M0.Fn (\"v\", M0.Var \"v\"))) in\n\n  if !check_val then (\n    match orig_result, cps_result with\n    | (M0.N n1, M0.N n2) -> exit (if n1 = n2 then 0 else 1)\n    | _ -> failwith \"Program is not evaluated to a number\"\n  );\n\n  let _ = print_endline \"== Running Input Program with M0 Interpreter ==\" in\n  let _ = print_m0_value orig_result in\n\n  let _ = print_endline \"== Running converted program with M0 Interpreter ==\" in\n  let _ = print_m0_value cps_result in\n  ()\n\nlet _ = main ()\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 299, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":7,"character":44},"end":{"line":7,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":8,"character":13},"end":{"line":8,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 301, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/lexer.ml","languageId":"ocaml","version":1,"text":"# 7 \"lexer.mll\"\n \n open Parser\n exception Lex_err of string\n let debug_tag = false\n let verbose s =  if debug_tag then (print_string s; print_newline())\n let comment_depth = ref 0\n let keyword_tbl = Hashtbl.create 31\n let _ = List.iter (fun (keyword, tok) -> Hashtbl.add keyword_tbl keyword tok)\n                   [(\"ifzero\", IF);\n                    (\"then\",THEN);\n                    (\"else\",ELSE);\n                    (\"fn\", FN);\n                    (\"rec\" , REC);\n                  ]\n let s2int = function \"\" -> raise (Lex_err(\"illegal number token\"))\n           | s -> if ('~' = String.get s 0) then\n                   - (int_of_string(String.sub s 1 ((String.length s)-1)))\n                   else int_of_string s\n\n# 22 \"lexer.ml\"\nlet __ocaml_lex_tables = {\n  Lexing.lex_base =\n   \"\\000\\000\\241\\255\\242\\255\\243\\255\\245\\255\\246\\255\\247\\255\\000\\000\\\n    \\000\\000\\250\\255\\084\\000\\159\\000\\169\\000\\002\\000\\007\\000\\179\\000\\\n    \\249\\255\\248\\255\\018\\000\\250\\255\\004\\000\\252\\255\\253\\255\\006\\000\\\n    \\017\\000\\255\\255\\254\\255\\251\\255\";\n  Lexing.lex_backtrk =\n   \"\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\014\\000\\\n    \\011\\000\\255\\255\\004\\000\\014\\000\\003\\000\\000\\000\\000\\000\\003\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\005\\000\\255\\255\\255\\255\\005\\000\\\n    \\005\\000\\255\\255\\255\\255\\255\\255\";\n  Lexing.lex_default =\n   \"\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\255\\255\\\n    \\255\\255\\000\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\000\\000\\000\\000\\019\\000\\000\\000\\255\\255\\000\\000\\000\\000\\255\\255\\\n    \\255\\255\\000\\000\\000\\000\\000\\000\";\n  Lexing.lex_trans =\n   \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\013\\000\\013\\000\\013\\000\\013\\000\\014\\000\\027\\000\\013\\000\\\n    \\013\\000\\013\\000\\000\\000\\000\\000\\013\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\021\\000\\000\\000\\000\\000\\020\\000\\\n    \\013\\000\\000\\000\\013\\000\\000\\000\\000\\000\\000\\000\\000\\000\\013\\000\\\n    \\008\\000\\003\\000\\016\\000\\006\\000\\002\\000\\005\\000\\004\\000\\026\\000\\\n    \\012\\000\\012\\000\\012\\000\\012\\000\\012\\000\\012\\000\\012\\000\\012\\000\\\n    \\012\\000\\012\\000\\024\\000\\025\\000\\023\\000\\007\\000\\017\\000\\000\\000\\\n    \\000\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\000\\000\\000\\000\\011\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\010\\000\\000\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\015\\000\\\n    \\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\\n    \\015\\000\\012\\000\\012\\000\\012\\000\\012\\000\\012\\000\\012\\000\\012\\000\\\n    \\012\\000\\012\\000\\012\\000\\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\\n    \\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\009\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\022\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\";\n  Lexing.lex_check =\n   \"\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\000\\000\\000\\000\\013\\000\\013\\000\\000\\000\\020\\000\\013\\000\\\n    \\014\\000\\014\\000\\255\\255\\255\\255\\014\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\018\\000\\255\\255\\255\\255\\018\\000\\\n    \\000\\000\\255\\255\\013\\000\\255\\255\\255\\255\\255\\255\\255\\255\\014\\000\\\n    \\000\\000\\000\\000\\008\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\018\\000\\024\\000\\018\\000\\000\\000\\007\\000\\255\\255\\\n    \\255\\255\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\010\\000\\255\\255\\255\\255\\000\\000\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\010\\000\\255\\255\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\\n    \\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\010\\000\\011\\000\\\n    \\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\\n    \\011\\000\\012\\000\\012\\000\\012\\000\\012\\000\\012\\000\\012\\000\\012\\000\\\n    \\012\\000\\012\\000\\012\\000\\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\\n    \\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\000\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\018\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\";\n  Lexing.lex_base_code =\n   \"\";\n  Lexing.lex_backtrk_code =\n   \"\";\n  Lexing.lex_default_code =\n   \"\";\n  Lexing.lex_trans_code =\n   \"\";\n  Lexing.lex_check_code =\n   \"\";\n  Lexing.lex_code =\n   \"\";\n}\n\nlet rec start lexbuf =\n   __ocaml_lex_start_rec lexbuf 0\nand __ocaml_lex_start_rec lexbuf __ocaml_lex_state =\n  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with\n      | 0 ->\n# 32 \"lexer.mll\"\n            ( start lexbuf )\n# 172 \"lexer.ml\"\n\n  | 1 ->\n# 33 \"lexer.mll\"\n                 ( start lexbuf)\n# 177 \"lexer.ml\"\n\n  | 2 ->\n# 34 \"lexer.mll\"\n                 ( start lexbuf)\n# 182 \"lexer.ml\"\n\n  | 3 ->\n# 35 \"lexer.mll\"\n             ( NUM (s2int(Lexing.lexeme lexbuf)) )\n# 187 \"lexer.ml\"\n\n  | 4 ->\n# 36 \"lexer.mll\"\n         ( let id = Lexing.lexeme lexbuf\n           in try Hashtbl.find keyword_tbl id\n              with _ -> ID id\n         )\n# 195 \"lexer.ml\"\n\n  | 5 ->\n# 40 \"lexer.mll\"\n          ( verbose \"eof\"; EOF)\n# 200 \"lexer.ml\"\n\n  | 6 ->\n# 41 \"lexer.mll\"\n           ( comment_depth :=1;\n             comment lexbuf;\n             start lexbuf )\n# 207 \"lexer.ml\"\n\n  | 7 ->\n# 44 \"lexer.mll\"\n           ( verbose \"=>\"; RARROW)\n# 212 \"lexer.ml\"\n\n  | 8 ->\n# 45 \"lexer.mll\"\n          (verbose \"+\"; PLUS)\n# 217 \"lexer.ml\"\n\n  | 9 ->\n# 46 \"lexer.mll\"\n          (verbose \"-\"; MINUS)\n# 222 \"lexer.ml\"\n\n  | 10 ->\n# 47 \"lexer.mll\"\n          (verbose \".\"; DOT)\n# 227 \"lexer.ml\"\n\n  | 11 ->\n# 48 \"lexer.mll\"\n          ( verbose \"(\"; LP)\n# 232 \"lexer.ml\"\n\n  | 12 ->\n# 49 \"lexer.mll\"\n          ( verbose \")\"; RP)\n# 237 \"lexer.ml\"\n\n  | 13 ->\n# 50 \"lexer.mll\"\n          (verbose \",\"; COMMA)\n# 242 \"lexer.ml\"\n\n  | 14 ->\n# 51 \"lexer.mll\"\n        (raise (Lex_err(\"illical token \"^(Lexing.lexeme lexbuf))))\n# 247 \"lexer.ml\"\n\n  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;\n      __ocaml_lex_start_rec lexbuf __ocaml_lex_state\n\nand comment lexbuf =\n   __ocaml_lex_comment_rec lexbuf 18\nand __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =\n  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with\n      | 0 ->\n# 54 \"lexer.mll\"\n          (comment_depth := !comment_depth+1; comment lexbuf)\n# 259 \"lexer.ml\"\n\n  | 1 ->\n# 55 \"lexer.mll\"\n          (comment_depth := !comment_depth-1;\n           if !comment_depth > 0 then comment lexbuf )\n# 265 \"lexer.ml\"\n\n  | 2 ->\n# 57 \"lexer.mll\"\n         (raise (Lex_err(\"Eof within comment\")))\n# 270 \"lexer.ml\"\n\n  | 3 ->\n# 58 \"lexer.mll\"\n          ( comment lexbuf)\n# 275 \"lexer.ml\"\n\n  | 4 ->\n# 59 \"lexer.mll\"\n            ( comment lexbuf)\n# 280 \"lexer.ml\"\n\n  | 5 ->\n# 60 \"lexer.mll\"\n         (comment lexbuf)\n# 285 \"lexer.ml\"\n\n  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;\n      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state\n\n;;\n\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/lexer.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/lexer.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/lexer.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 304, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/lexer.ml"},"range":{"start":{"line":5,"character":61},"end":{"line":5,"character":62}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml","languageId":"ocaml","version":1,"text":"(*\n * SNU 4190.310 Programming Languages \n * M0 Language Definition and Interpreter\n *)\n\ntype mexp = \n  | Num of int\n  | Var of id\n  | Fn of id * mexp\n  | App of mexp * mexp\n  | Rec of id * id * mexp\n  | Ifz of mexp * mexp * mexp\n  | Add of mexp * mexp\n  | Pair of mexp * mexp      (* (e, e) *)\n  | Fst of mexp            (*   e.1  *)\n  | Snd of mexp            (*   e.2  *)\nand id = string\n\ntype value = \n  | N of int\n  | P of value * value\n  | C of closure\nand closure = fexpr * env\nand fexpr = Fun of id * mexp | RecFun of id * id * mexp\nand env = id -> value\n\nexception RunError of string\nexception TypeError of string\n\nlet bind e x v = (fun y -> if y = x then v else e y)\n  \nlet getNum = function \n  | N n -> n \n  | _ -> raise (TypeError \"not an int\")\n\nlet getPair = function \n  | (P (a,b)) -> (a, b) \n  | _ -> raise (TypeError \"not a pair\")\n\nlet getClosure = function \n  | (C c) -> c \n  | _ -> raise (TypeError \"not a function\")\n\nlet rec eval env exp = \n  match exp with\n  | Num n -> N n\n  | Var x -> env x\n  | Fn (x, e) -> C (Fun (x, e), env)\n  | Rec (f, x, e) -> C (RecFun (f, x, e), env)\n  | App (e1, e2) ->\n    let v1 = eval env e1 in\n    let v2 = eval env e2 in\n    let (c, env') = getClosure v1 in\n    (match c with \n    | Fun (x, e) -> eval (bind env' x v2) e\n    | RecFun (f, x, e) ->  \n      let env'' = bind env' x v2 in\n      let env''' = bind env'' f v1 in\n      eval env''' e)\n  | Ifz (e1, e2, e3) ->\n    let v1 = eval env e1 in\n    if getNum v1 = 0 then eval env e2 else eval env e3\n  | Add (e1, e2) -> \n    let v1 = eval env e1 in\n    let v2 = eval env e2 in\n    N (getNum v1 + getNum v2)\n  | Pair (e1, e2) -> \n    let v1 = eval env e1 in\n    let v2 = eval env e2 in\n    P (v1, v2)\n  | Fst e -> \n    let v = eval env e in\n    fst (getPair v)\n  | Snd e -> \n    let v = eval env e in\n    snd (getPair v)\n\nlet emptyEnv = (fun x -> raise (RunError (\"unbound id: \" ^ x)))\n\nlet run : mexp -> value = fun exp -> eval emptyEnv exp\n\nlet ps = print_string\nlet nl = print_newline\nlet indent i =\n  let rec iter = function \n    | 0 -> ()\n    | n -> ps \" \"; iter (n-1)\n  in  \n  nl (); iter i\n  \nlet rec pp n = function \n  | Num i -> print_int i\n  | Var s -> ps s\n  | Fn (x, e) -> ps (\"fn \"^ x ^\" => \"); \n    (match e with\n    | Ifz _ -> indent (n+1); pp (n+1) e\n    | _ -> pp n e)\n  | App (e, e') -> ps \"(\"; pp n e; ps \") (\"; pp n e'; ps \")\"\n  | Ifz (e1, e2, e3)-> \n    ps \"ifzero \"; pp n e1; ps \" then \";\n    indent (n+1); pp (n+1) e2;\n    indent (n); ps \"else\";\n    indent (n+1); pp (n+1) e3\n  | Pair (e1, e2) -> ps \"(\"; pp n e1; ps \", \"; pp n e2; ps \")\"\n  | Fst e -> pp n e; ps \".1\"\n  | Snd e -> pp n e; ps \".2\"\n  | Add (e1, e2) -> ps \"(\"; pp n e1; ps \" + \"; pp n e2; ps \")\"\n  | Rec (f, x, e) -> ps (\"rec \"^f^\" \"^x^\" => \"); pp n e\n\nlet print = pp 0\n\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 306, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Sending response {"id": 307, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 308, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/parser.ml","languageId":"ocaml","version":1,"text":"type token =\n  | IF\n  | THEN\n  | ELSE\n  | FN\n  | RARROW\n  | DOT\n  | PLUS\n  | MINUS\n  | LP\n  | RP\n  | REC\n  | COMMA\n  | EOF\n  | NUM of (int)\n  | ID of (string)\n\nopen Parsing;;\nlet _ = parse_error;;\n# 8 \"parser.mly\"\nexception IncorrectSelection\nlet whichSel = function (e, 1) -> M0.Fst e\n      | (e, 2) -> M0.Snd e\n      | _ -> raise IncorrectSelection\n# 26 \"parser.ml\"\nlet yytransl_const = [|\n  257 (* IF *);\n  258 (* THEN *);\n  259 (* ELSE *);\n  260 (* FN *);\n  261 (* RARROW *);\n  262 (* DOT *);\n  263 (* PLUS *);\n  264 (* MINUS *);\n  265 (* LP *);\n  266 (* RP *);\n  267 (* REC *);\n  268 (* COMMA *);\n    0 (* EOF *);\n    0|]\n\nlet yytransl_block = [|\n  269 (* NUM *);\n  270 (* ID *);\n    0|]\n\nlet yylhs = \"\\255\\255\\\n\\001\\000\\002\\000\\002\\000\\002\\000\\002\\000\\002\\000\\002\\000\\002\\000\\\n\\002\\000\\002\\000\\002\\000\\002\\000\\000\\000\"\n\nlet yylen = \"\\002\\000\\\n\\002\\000\\003\\000\\001\\000\\002\\000\\001\\000\\004\\000\\005\\000\\002\\000\\\n\\003\\000\\003\\000\\006\\000\\005\\000\\002\\000\"\n\nlet yydefred = \"\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\003\\000\\\n\\005\\000\\013\\000\\000\\000\\000\\000\\000\\000\\004\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\002\\000\\000\\000\\\n\\000\\000\\010\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\012\\000\\000\\000\\000\\000\"\n\nlet yydgoto = \"\\002\\000\\\n\\010\\000\\020\\000\"\n\nlet yysindex = \"\\007\\000\\\n\\024\\255\\000\\000\\024\\255\\252\\254\\009\\255\\024\\255\\010\\255\\000\\000\\\n\\000\\000\\000\\000\\029\\000\\005\\255\\021\\255\\000\\000\\042\\255\\013\\255\\\n\\023\\255\\024\\255\\000\\000\\026\\255\\024\\255\\024\\255\\000\\000\\024\\255\\\n\\034\\255\\000\\000\\251\\254\\056\\255\\078\\255\\067\\255\\024\\255\\024\\255\\\n\\000\\000\\078\\255\\086\\255\"\n\nlet yyrindex = \"\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\015\\000\\000\\000\\047\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\058\\000\\042\\000\"\n\nlet yygindex = \"\\000\\000\\\n\\000\\000\\255\\255\"\n\nlet yytablesize = 326\nlet yytable = \"\\011\\000\\\n\\008\\000\\012\\000\\005\\000\\006\\000\\015\\000\\003\\000\\021\\000\\001\\000\\\n\\004\\000\\013\\000\\017\\000\\018\\000\\005\\000\\006\\000\\009\\000\\007\\000\\\n\\027\\000\\008\\000\\009\\000\\028\\000\\029\\000\\014\\000\\030\\000\\016\\000\\\n\\003\\000\\022\\000\\025\\000\\004\\000\\019\\000\\034\\000\\035\\000\\005\\000\\\n\\006\\000\\005\\000\\007\\000\\026\\000\\008\\000\\009\\000\\031\\000\\000\\000\\\n\\000\\000\\011\\000\\003\\000\\000\\000\\000\\000\\004\\000\\006\\000\\017\\000\\\n\\018\\000\\005\\000\\006\\000\\023\\000\\007\\000\\024\\000\\008\\000\\009\\000\\\n\\003\\000\\007\\000\\032\\000\\004\\000\\000\\000\\017\\000\\018\\000\\005\\000\\\n\\006\\000\\000\\000\\007\\000\\003\\000\\008\\000\\009\\000\\004\\000\\000\\000\\\n\\017\\000\\018\\000\\005\\000\\006\\000\\033\\000\\007\\000\\003\\000\\008\\000\\\n\\009\\000\\004\\000\\000\\000\\017\\000\\018\\000\\005\\000\\006\\000\\000\\000\\\n\\007\\000\\000\\000\\008\\000\\009\\000\\018\\000\\005\\000\\006\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\009\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\008\\000\\008\\000\\008\\000\\008\\000\\000\\000\\008\\000\\008\\000\\\n\\000\\000\\008\\000\\008\\000\\008\\000\\008\\000\\008\\000\\008\\000\\009\\000\\\n\\009\\000\\009\\000\\009\\000\\000\\000\\009\\000\\009\\000\\000\\000\\000\\000\\\n\\009\\000\\009\\000\\009\\000\\009\\000\\009\\000\\003\\000\\000\\000\\000\\000\\\n\\004\\000\\000\\000\\017\\000\\018\\000\\005\\000\\006\\000\\000\\000\\007\\000\\\n\\000\\000\\008\\000\\009\\000\\011\\000\\011\\000\\011\\000\\000\\000\\011\\000\\\n\\006\\000\\006\\000\\000\\000\\011\\000\\011\\000\\011\\000\\011\\000\\000\\000\\\n\\006\\000\\000\\000\\006\\000\\007\\000\\007\\000\\000\\000\\000\\000\\000\\000\\\n\\000\\000\\000\\000\\000\\000\\007\\000\\000\\000\\007\\000\"\n\nlet yycheck = \"\\001\\000\\\n\\000\\000\\003\\000\\008\\001\\009\\001\\006\\000\\001\\001\\002\\001\\001\\000\\\n\\004\\001\\014\\001\\006\\001\\007\\001\\008\\001\\009\\001\\000\\000\\011\\001\\\n\\018\\000\\013\\001\\014\\001\\021\\000\\022\\000\\013\\001\\024\\000\\014\\001\\\n\\001\\001\\005\\001\\014\\001\\004\\001\\000\\000\\031\\000\\032\\000\\008\\001\\\n\\009\\001\\008\\001\\011\\001\\013\\001\\013\\001\\014\\001\\005\\001\\255\\255\\\n\\255\\255\\000\\000\\001\\001\\255\\255\\255\\255\\004\\001\\000\\000\\006\\001\\\n\\007\\001\\008\\001\\009\\001\\010\\001\\011\\001\\012\\001\\013\\001\\014\\001\\\n\\001\\001\\000\\000\\003\\001\\004\\001\\255\\255\\006\\001\\007\\001\\008\\001\\\n\\009\\001\\255\\255\\011\\001\\001\\001\\013\\001\\014\\001\\004\\001\\255\\255\\\n\\006\\001\\007\\001\\008\\001\\009\\001\\010\\001\\011\\001\\001\\001\\013\\001\\\n\\014\\001\\004\\001\\255\\255\\006\\001\\007\\001\\008\\001\\009\\001\\255\\255\\\n\\011\\001\\255\\255\\013\\001\\014\\001\\007\\001\\008\\001\\009\\001\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\014\\001\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\001\\001\\002\\001\\003\\001\\004\\001\\255\\255\\006\\001\\007\\001\\\n\\255\\255\\009\\001\\010\\001\\011\\001\\012\\001\\013\\001\\014\\001\\001\\001\\\n\\002\\001\\003\\001\\004\\001\\255\\255\\006\\001\\007\\001\\255\\255\\255\\255\\\n\\010\\001\\011\\001\\012\\001\\013\\001\\014\\001\\001\\001\\255\\255\\255\\255\\\n\\004\\001\\255\\255\\006\\001\\007\\001\\008\\001\\009\\001\\255\\255\\011\\001\\\n\\255\\255\\013\\001\\014\\001\\002\\001\\003\\001\\004\\001\\255\\255\\006\\001\\\n\\002\\001\\003\\001\\255\\255\\010\\001\\011\\001\\012\\001\\013\\001\\255\\255\\\n\\010\\001\\255\\255\\012\\001\\002\\001\\003\\001\\255\\255\\255\\255\\255\\255\\\n\\255\\255\\255\\255\\255\\255\\010\\001\\255\\255\\012\\001\"\n\nlet yynames_const = \"\\\n  IF\\000\\\n  THEN\\000\\\n  ELSE\\000\\\n  FN\\000\\\n  RARROW\\000\\\n  DOT\\000\\\n  PLUS\\000\\\n  MINUS\\000\\\n  LP\\000\\\n  RP\\000\\\n  REC\\000\\\n  COMMA\\000\\\n  EOF\\000\\\n  \"\n\nlet yynames_block = \"\\\n  NUM\\000\\\n  ID\\000\\\n  \"\n\nlet yyact = [|\n  (fun _ -> failwith \"parser\")\n; (fun __caml_parser_env ->\n    let _1 = (Parsing.peek_val __caml_parser_env 1 : M0.mexp) in\n    Obj.repr(\n# 32 \"parser.mly\"\n                  (_1)\n# 198 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _2 = (Parsing.peek_val __caml_parser_env 1 : M0.mexp) in\n    Obj.repr(\n# 35 \"parser.mly\"\n               (_2)\n# 205 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in\n    Obj.repr(\n# 36 \"parser.mly\"\n        (M0.Num _1)\n# 212 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in\n    Obj.repr(\n# 37 \"parser.mly\"\n              (M0.Num (- _2))\n# 219 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in\n    Obj.repr(\n# 38 \"parser.mly\"\n       (M0.Var (_1))\n# 226 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in\n    let _4 = (Parsing.peek_val __caml_parser_env 0 : M0.mexp) in\n    Obj.repr(\n# 39 \"parser.mly\"\n                      (M0.Fn(_2,_4))\n# 234 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in\n    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in\n    let _5 = (Parsing.peek_val __caml_parser_env 0 : M0.mexp) in\n    Obj.repr(\n# 40 \"parser.mly\"\n                          (M0.Rec(_2, _3, _5))\n# 243 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _1 = (Parsing.peek_val __caml_parser_env 1 : M0.mexp) in\n    let _2 = (Parsing.peek_val __caml_parser_env 0 : M0.mexp) in\n    Obj.repr(\n# 41 \"parser.mly\"\n                        (M0.App(_1,_2))\n# 251 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _1 = (Parsing.peek_val __caml_parser_env 2 : M0.mexp) in\n    let _3 = (Parsing.peek_val __caml_parser_env 0 : M0.mexp) in\n    Obj.repr(\n# 42 \"parser.mly\"\n                   (M0.Add(_1,_3))\n# 259 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _1 = (Parsing.peek_val __caml_parser_env 2 : M0.mexp) in\n    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in\n    Obj.repr(\n# 43 \"parser.mly\"\n                 (whichSel (_1,_3))\n# 267 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _2 = (Parsing.peek_val __caml_parser_env 4 : M0.mexp) in\n    let _4 = (Parsing.peek_val __caml_parser_env 2 : M0.mexp) in\n    let _6 = (Parsing.peek_val __caml_parser_env 0 : M0.mexp) in\n    Obj.repr(\n# 44 \"parser.mly\"\n                                (M0.Ifz(_2,_4,_6))\n# 276 \"parser.ml\"\n               : M0.mexp))\n; (fun __caml_parser_env ->\n    let _2 = (Parsing.peek_val __caml_parser_env 3 : M0.mexp) in\n    let _4 = (Parsing.peek_val __caml_parser_env 1 : M0.mexp) in\n    Obj.repr(\n# 45 \"parser.mly\"\n                          (M0.Pair (_2, _4))\n# 284 \"parser.ml\"\n               : M0.mexp))\n(* Entry program *)\n; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))\n|]\nlet yytables =\n  { Parsing.actions=yyact;\n    Parsing.transl_const=yytransl_const;\n    Parsing.transl_block=yytransl_block;\n    Parsing.lhs=yylhs;\n    Parsing.len=yylen;\n    Parsing.defred=yydefred;\n    Parsing.dgoto=yydgoto;\n    Parsing.sindex=yysindex;\n    Parsing.rindex=yyrindex;\n    Parsing.gindex=yygindex;\n    Parsing.tablesize=yytablesize;\n    Parsing.table=yytable;\n    Parsing.check=yycheck;\n    Parsing.error_function=parse_error;\n    Parsing.names_const=yynames_const;\n    Parsing.names_block=yynames_block }\nlet program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =\n   (Parsing.yyparse yytables 1 lexfun lexbuf : M0.mexp)\n;;\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/parser.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 309, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/parser.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/parser.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 311, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/parser.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 312, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/parser.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/parser.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 314, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/main.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/parser.ml"}}}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 316, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 317, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/lexer.ml"}}}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 318, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 320, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 322, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 323, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":5,"character":22},"end":{"line":5,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"position":{"line":19,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 325, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"position":{"line":19,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 326, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 328, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 329, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":28},"end":{"line":45,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 330, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":42,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 332, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 334, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":5,"character":22},"end":{"line":5,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 336, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 338, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":28},"end":{"line":45,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":39,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 340, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":34,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 344, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":5,"character":22},"end":{"line":5,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"position":{"line":5,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"position":{"line":5,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 348, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 349, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 350, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":28},"end":{"line":45,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":41,"character":55}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":353,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":48,"character":59}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 353, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":354,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":31},"end":{"line":45,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 354, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":355,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Sending response {"id": 355, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":356,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":357,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 357, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":358,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 358, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":359,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":360,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 360, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":361,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":5,"character":22},"end":{"line":5,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 361, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":362,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"position":{"line":15,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":363,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"position":{"line":16,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 363, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":364,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"position":{"line":15,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 364, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":365,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"position":{"line":15,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 365, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":366,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"position":{"line":7,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 366, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":367,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 367, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":368,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 368, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":369,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 369, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":370,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":31},"end":{"line":45,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 370, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":371,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 371, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":372,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":373,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 373, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":374,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":5,"character":22},"end":{"line":5,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 374, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":375,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 375, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":376,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0121593475342ms
Sending response {"id": 376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":377,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 377, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":378,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":31},"end":{"line":45,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 378, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":379,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":40,"character":42}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 379, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":380,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":41,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 380, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":381,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":41,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 381, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":382,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":42,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Sending response {"id": 382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":383,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":42,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 383, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":384,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":42,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":385,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":43,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 385, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":386,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":43,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.448942184448ms
Sending response {"id": 386, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":387,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":40,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 387, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":388,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":40,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 388, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":389,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":39,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":390,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":40,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 390, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":391,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":63,"character":19},"end":{"line":63,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 391, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":392,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":90,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.018835067749ms
Sending response {"id": 392, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":103},"contentChanges":[{"text":""}]}}
Read message 
{"jsonrpc":"2.0","id":393,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 393, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":105},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","id":394,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 394, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":395,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 395, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":396,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":82,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 396, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":397,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":82,"character":27},"end":{"line":82,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":398,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":88,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0147819519043ms
Sending response {"id": 398, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":399,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":88,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 399, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":400,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":72,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":401,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":402,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 402, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":403,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 403, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":404,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"position":{"line":79,"character":54}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 404, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":405,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"position":{"line":79,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 405, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":406,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"range":{"start":{"line":79,"character":54},"end":{"line":79,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 406, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":407,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0121593475342ms
Sending response {"id": 407, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":105},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","id":408,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0331401824951ms
Sending response {"id": 408, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":409,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 409, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":410,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 410, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":411,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":82,"character":27},"end":{"line":82,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 411, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":412,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00596046447754ms
Sending response {"id": 412, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":105},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":105}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":413,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":62,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 413, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":414,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":62,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 414, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":415,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":62,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 415, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":416,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":61,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Sending response {"id": 416, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":417,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":61,"character":27},"end":{"line":61,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 417, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":418,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":55,"character":86},"end":{"line":55,"character":86}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 418, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":419,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":49},"end":{"line":57,"character":49}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 419, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":107},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     (*Fn(k, App(Var k, App(cps' e1, cps' e2)))\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","id":420,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 420, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":421,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":47},"end":{"line":57,"character":47}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 421, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":422,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 422, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":423,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":31},"end":{"line":57,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 423, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":424,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":16},"end":{"line":57,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 424, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":425,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":7},"end":{"line":57,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 425, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":109},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     Fn(k, App(Var k, App(cps' e1, cps' e2)))\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","id":426,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 426, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":427,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":57,"character":5},"end":{"line":57,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 427, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":428,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0169277191162ms
Sending response {"id": 428, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":429,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":55,"character":5}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 429, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":430,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":55,"character":5},"end":{"line":55,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 430, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":110},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     (Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     Fn(k, App(Var k, App(cps' e1, cps' e2)))\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","id":431,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":55,"character":6}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00500679016113ms
Sending response {"id": 431, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":111},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     (*Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     Fn(k, App(Var k, App(cps' e1, cps' e2)))\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","id":432,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 432, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":433,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":55,"character":7},"end":{"line":55,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 433, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":434,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0169277191162ms
Sending response {"id": 434, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":435,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":55,"character":9},"end":{"line":55,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 435, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":436,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":55,"character":81},"end":{"line":55,"character":81}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 436, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":437,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":7},"end":{"line":56,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 437, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":438,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":56,"character":5},"end":{"line":56,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 438, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":439,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":55,"character":81},"end":{"line":55,"character":81}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 439, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":440,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":55,"character":88},"end":{"line":55,"character":88}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 440, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":112},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     (*Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))*\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     Fn(k, App(Var k, App(cps' e1, cps' e2)))\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","id":441,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 441, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":442,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":55,"character":89},"end":{"line":55,"character":89}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 442, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":113},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     (*Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))*)\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     Fn(k, App(Var k, App(cps' e1, cps' e2)))\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","id":443,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Sending response {"id": 443, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":444,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":55,"character":90},"end":{"line":55,"character":90}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 444, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":445,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 445, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":446,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0150203704834ms
Sending response {"id": 446, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":113},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     (*Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))*)\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     Fn(k, App(Var k, App(cps' e1, cps' e2)))\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":113}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":121},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\n open M0\n\n let count = ref 0\n \n let new_name () = \n   let _ = count := !count + 1 in\n   \"x_\" ^ (string_of_int !count)\n \n let rec alpha_conv exp subst = \n   match exp with\n   | Num n -> Num n\n   | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n   | Fn (x, e) ->\n     let x' = new_name () in\n     let subst' = (x, x') :: subst in\n     Fn (x', alpha_conv e subst')\n   | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Rec (f, x, e) -> \n     let x' = new_name () in\n     let f' = new_name () in\n     let subst' = (f, f') :: (x, x') :: subst in\n     Rec (f', x', alpha_conv e subst')\n   | Ifz (e1, e2, e3) -> \n     Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n   | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n   | Fst e -> Fst (alpha_conv e subst)\n   | Snd e -> Snd (alpha_conv e subst)\n \n (* TODO : Complete this function *)\n let rec cps' exp = \n   let k = new_name () in\n   match exp with\n   (* Constant expressions *)\n   | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n   | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n   | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(Var k, Fn(x, e)))\n     \n     (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n   | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n   (* Non constant expressions *)\n   | App (e1, e2) -> \n     let v1 = new_name() in\n     let v2 = new_name() in\n       \n \n     Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n     (*Fn(k, App(Var k, App(e1, e2)))*)\n     (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n   | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n     let v1 = new_name() in\n     let v2 = new_name() in\n     let v3 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n   | Add (e1, e2) ->\n     let v1 = new_name () in\n     let v2 = new_name () in\n     Fn (k, \n         App (cps' e1, \n             Fn (v1, \n                 App (cps' e2, \n                     Fn (v2, \n                         App (Var k, Add (Var v1, Var v2))\n                         )\n                     )\n                 )\n             )\n         )\n   | Pair (e1, e2) ->\n     let v1 = new_name() in\n     let v2 = new_name() in\n     Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n   | Fst e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n \n   | Snd e ->\n     let v1 = new_name() in\n     Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\n let cps exp = cps' (alpha_conv exp [])\n \n "}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":122},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn(x, e)))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":447,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 447, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":448,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 448, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":123},"contentChanges":[{"text":""}]}}
Read message 
{"jsonrpc":"2.0","id":449,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 449, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":450,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0169277191162ms
Sending response {"id": 450, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":124},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn(x, e)))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":451,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 451, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":452,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":90,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 452, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":453,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 453, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":454,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00882148742676ms
Sending response {"id": 454, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":124},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn(x, e)))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":124}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":455,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":62,"character":104}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 455, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":456,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":41,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 456, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":457,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":41,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 457, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":458,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":45,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Sending response {"id": 458, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":459,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":45,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 459, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":460,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":45,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 460, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":461,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":26},"end":{"line":45,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.018835067749ms
Sending response {"id": 461, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":462,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":45,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 462, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":463,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":27},"end":{"line":45,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 463, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":127},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn(x, cpse)))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":464,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 464, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":465,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":30},"end":{"line":45,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 465, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":466,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0169277191162ms
Sending response {"id": 466, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":129},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn(x, cps' e)))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":467,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 467, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":468,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":32},"end":{"line":45,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 468, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":469,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0171661376953ms
Sending response {"id": 469, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":470,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":45,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 470, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":471,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":27},"end":{"line":45,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 471, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":472,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":47,"character":55}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 472, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":473,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0147819519043ms
Sending response {"id": 473, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":474,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 474, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":475,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 475, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":476,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/m0.ml"},"range":{"start":{"line":79,"character":54},"end":{"line":79,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 476, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":477,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0100135803223ms
Sending response {"id": 477, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":129},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Continuation Passing Style\" Skeleton\n *)\n\nopen M0\n\nlet count = ref 0\n\nlet new_name () = \n  let _ = count := !count + 1 in\n  \"x_\" ^ (string_of_int !count)\n\nlet rec alpha_conv exp subst = \n  match exp with\n  | Num n -> Num n\n  | Var x -> (try Var (List.assoc x subst) with Not_found -> Var x)\n  | Fn (x, e) ->\n    let x' = new_name () in\n    let subst' = (x, x') :: subst in\n    Fn (x', alpha_conv e subst')\n  | App (e1, e2) -> App (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Rec (f, x, e) -> \n    let x' = new_name () in\n    let f' = new_name () in\n    let subst' = (f, f') :: (x, x') :: subst in\n    Rec (f', x', alpha_conv e subst')\n  | Ifz (e1, e2, e3) -> \n    Ifz (alpha_conv e1 subst, alpha_conv e2 subst, alpha_conv e3 subst)\n  | Add (e1, e2) -> Add (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Pair (e1, e2) -> Pair (alpha_conv e1 subst, alpha_conv e2 subst)\n  | Fst e -> Fst (alpha_conv e subst)\n  | Snd e -> Snd (alpha_conv e subst)\n\n(* TODO : Complete this function *)\nlet rec cps' exp = \n  let k = new_name () in\n  match exp with\n  (* Constant expressions *)\n  | Num n -> Fn (k, (* Fill in here *)App(Var k, Num n) )\n  | Var x -> Fn (k, (* Fill in here *)App(Var k, Var x) )\n  | Fn (x, e) -> (*Fn (k, Fill in here App(Var k, Fn(x, App(cps' e, Fn(\"#v\", Var \"#v\"))) ))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(Var k, Fn(x, cps' e)))\n    \n    (*Fn(k, App(Var k, App(cps' e, Fn(v1, Fn(x, Var v1)))))*)\n  | Rec (f, x, e) -> Fn (k, (* Fill in here *) App(Var k, Num 0))\n  (* Non constant expressions *)\n  | App (e1, e2) -> \n    let v1 = new_name() in\n    let v2 = new_name() in\n      \n\n    Fn (k, App(cps' e1,Fn(v1,App(cps' e2, Fn(v2, App(Var k, App(Var v1, Var v2)))))))\n    (*Fn(k, App(Var k, App(e1, e2)))*)\n    (*Fn(k, App(Var k, App(cps' e1, cps' e2)))*)\n  | Ifz (e1, e2, e3) ->(* Fn (k, (* Fill in here *) App(Var k, Num 0))*)\n    let v1 = new_name() in\n    let v2 = new_name() in\n    let v3 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(cps' e3, Fn(v3, App(Var k, Ifz(Var v1, Var v2, Var v3)))))))))\n  | Add (e1, e2) ->\n    let v1 = new_name () in\n    let v2 = new_name () in\n    Fn (k, \n        App (cps' e1, \n            Fn (v1, \n                App (cps' e2, \n                    Fn (v2, \n                        App (Var k, Add (Var v1, Var v2))\n                        )\n                    )\n                )\n            )\n        )\n  | Pair (e1, e2) ->\n    let v1 = new_name() in\n    let v2 = new_name() in\n    Fn(k, App(cps' e1, Fn(v1, App(cps' e2, Fn(v2, App(Var k, Pair(Var v1, Var v2)))))))\n  | Fst e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Fst(Var v1)))))\n\n  | Snd e ->\n    let v1 = new_name() in\n    Fn(k, App(cps' e, Fn(v1, App(Var k, Snd(Var v1)))))\nlet cps exp = cps' (alpha_conv exp [])\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml","version":129}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":478,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 478, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":479,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 479, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":480,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 480, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":481,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/pl-checker/2018/hw6/ex2/main.ml"},"range":{"start":{"line":5,"character":22},"end":{"line":5,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 481, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":481}}
Read message 
{"jsonrpc":"2.0","id":482,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 482, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":483,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 483, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":484,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 484, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":485,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"range":{"start":{"line":45,"character":27},"end":{"line":45,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 485, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":486,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":34,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 486, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":487,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":38,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 487, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":488,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX2/cps.ml"},"position":{"line":38,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0147819519043ms
Sending response {"id": 488, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":489,"method":"shutdown","params":null}
Sending response {"id": 489, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"exit","params":null}
Got exit! Terminating loop
Finished
