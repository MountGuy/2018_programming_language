====== Machine state ======

***** Command *****
[push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 1;
malloc;
push (@,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[]

***** Environment *****
[]

***** Memory *****


====== Machine state ======

***** Command *****
[bind f;
malloc;
bind #write_var;
push f;
push f;
push 1;
malloc;
push (@,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[]

***** Memory *****


====== Machine state ======

***** Command *****
[malloc;
bind #write_var;
push f;
push f;
push 1;
malloc;
push (@,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[bind #write_var;
push f;
push f;
push 1;
malloc;
push (@,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<1, 0>]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[push f;
push f;
push 1;
malloc;
push (@,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[]

***** Environment *****
[#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[push f;
push 1;
malloc;
push (@,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[push 1;
malloc;
push (@,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[malloc;
push (@,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[push (@,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<2, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []];
<2, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<3, 0>;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []];
<2, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []];
<2, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<3, 0>;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []];
<2, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****


====== Machine state ======

***** Command *****
[malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<2, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<4, 0>;
<2, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<2, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<4, 0>;
<2, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<5, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<5, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<6, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<6, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<3, 0>]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<6, 0>;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<6, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #l;
load;
call]

***** Stack *****
[<5, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #l;
load;
call]

***** Stack *****
[1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
call]

***** Stack *****
[<4, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[call]

***** Stack *****
[<2, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <6, 0>;
#v : <5, 0>;
#l : <4, 0>;
#after : <3, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind f;
push x;
load;
push 1;
less;
jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push x;
load;
push 1;
less;
jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 1;
less;
jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<2, 0>;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 1;
less;
jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[less;
jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[false;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push x;
load;
push f;
push f;
push x;
load;
push 1;
sub;
malloc;
push (@,
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push f;
push f;
push x;
load;
push 1;
sub;
malloc;
push (@,
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<2, 0>;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push f;
push f;
push x;
load;
push 1;
sub;
malloc;
push (@,
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push f;
push x;
load;
push 1;
sub;
malloc;
push (@,
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push x;
load;
push 1;
sub;
malloc;
push (@,
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 1;
sub;
malloc;
push (@,
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<2, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 1;
sub;
malloc;
push (@,
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[sub;
malloc;
push (@,
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
push (@,
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push (@,
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  );
malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<8, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
<8, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #after;
push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<9, 0>;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
<8, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #after;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
<8, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<9, 0>;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
<8, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<8, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<10, 0>;
<8, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<8, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<10, 0>;
<8, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<11, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #v;
store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<11, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #c;
push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<12, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #c;
store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<12, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #after;
load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<9, 0>;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 0;
malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #c;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<12, 0>;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #c;
load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<12, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #v;
load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<11, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #l;
load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<10, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[call;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<8, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <12, 0>;
#v : <11, 0>;
#l : <10, 0>;
#after : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind f;
push x;
load;
push 1;
less;
jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push x;
load;
push 1;
less;
jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 1;
less;
jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<8, 0>;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 1;
less;
jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[less;
jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
0;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[jtr (
  [push 0],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (@,
    [add;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    );
  malloc;
  bind #after;
  push #after;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  pop;
  push #after;
  load;
  push 0;
  malloc;
  push #c;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]);
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[true;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 0;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(f, (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []);
0;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<14, 0>;
0;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<14, 0>;
0;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<15, 0>;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<15, 0>;
<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<16, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<16, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<17, 0>;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<17, 0>;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<14, 0>;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<17, 0>;
0;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
0;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #l;
load;
call]

***** Stack *****
[<16, 0>;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
0;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #l;
load;
call]

***** Stack *****
[0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
0;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
call]

***** Stack *****
[<15, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
0;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[call]

***** Stack *****
[<13, 0>;
0;
(fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>];
0;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <17, 0>;
#v : <16, 0>;
#l : <15, 0>;
#r : <14, 0>;
x : <8, 0>]

***** Memory *****
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[add;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<18, 0>;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<18, 0>;
1;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<19, 0>;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<19, 0>;
<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<20, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<20, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<21, 0>;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<21, 0>;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<18, 0>]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<21, 0>;
1]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #v;
load;
push #l;
load;
call]

***** Stack *****
[(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []];
1]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push #l;
load;
call]

***** Stack *****
[<20, 0>;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []];
1]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #l;
load;
call]

***** Stack *****
[0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []];
1]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
call]

***** Stack *****
[<19, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []];
1]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[call]

***** Stack *****
[<7, 0>;
0;
(fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []];
1]

***** Environment *****
[#c : <21, 0>;
#v : <20, 0>;
#l : <19, 0>;
#r : <18, 0>;
@ : <13, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [];
x : <2, 0>]

***** Memory *****
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #write_var;
store;
push #write_var;
load;
put;
push #write_var;
load;
unbind;
pop;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1]

***** Environment *****
[@ : <7, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push #write_var;
load;
put;
push #write_var;
load;
unbind;
pop;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<1, 0>;
1]

***** Environment *****
[@ : <7, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #write_var;
load;
put;
push #write_var;
load;
unbind;
pop;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[]

***** Environment *****
[@ : <7, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
put;
push #write_var;
load;
unbind;
pop;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<1, 0>]

***** Environment *****
[@ : <7, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[put;
push #write_var;
load;
unbind;
pop;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1]

***** Environment *****
[@ : <7, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

1
====== Machine state ======

***** Command *****
[push #write_var;
load;
unbind;
pop;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[]

***** Environment *****
[@ : <7, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
unbind;
pop;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<1, 0>]

***** Environment *****
[@ : <7, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[unbind;
pop;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1]

***** Environment *****
[@ : <7, 0>;
#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(@, <7, 0>);
1]

***** Environment *****
[#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[unbind;
pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1]

***** Environment *****
[#write_var : <1, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[(#write_var, <1, 0>);
1]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #r;
push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<22, 0>;
1]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #r;
store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[1]

***** Environment *****
[#r : <22, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<22, 0>;
1]

***** Environment *****
[#r : <22, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[]

***** Environment *****
[#r : <22, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<22, 0> : 1
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind #l;
push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<23, 0>]

***** Environment *****
[#r : <22, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<22, 0> : 1
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push #l;
store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[]

***** Environment *****
[#l : <23, 0>;
#r : <22, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<22, 0> : 1
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
malloc;
bind #v;
push #v;
store;
malloc;
bind #c;
push #c;
store;
push #r;
load;
push #c;
load;
push #v;
load;
push #l;
load;
call]

***** Stack *****
[<23, 0>]

***** Environment *****
[#l : <23, 0>;
#r : <22, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []]

***** Memory *****
<22, 0> : 1
<1, 0> : 1
<7, 0> : 0
<21, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]
<20, 0> : 0
<19, 0> : <7, 0>
<18, 0> : 1
<13, 0> : 0
<17, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<16, 0> : 0
<15, 0> : <13, 0>
<14, 0> : 0
<8, 0> : 0
<12, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<11, 0> : 0
<10, 0> : <8, 0>
<9, 0> : (fun @ ->
  [add;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    [];
  x : <2, 0>]
<2, 0> : 1
<6, 0> : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (@,
      [add;
      malloc;
      bind #r;
      push #r;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      push #r;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]
      );
    malloc;
    bind #after;
    push #after;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    pop;
    push #after;
    load;
    push 0;
    malloc;
    push #c;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]);
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  []
<5, 0> : 1
<4, 0> : <2, 0>
<3, 0> : (fun @ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  malloc;
  bind #r;
  push #r;
  store;
  malloc;
  bind #l;
  push #l;
  store;
  malloc;
  bind #v;
  push #v;
  store;
  malloc;
  bind #c;
  push #c;
  store;
  push #r;
  load;
  push #c;
  load;
  push #v;
  load;
  push #l;
  load;
  call]
  ), Env =
  [#write_var : <1, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (@,
        [add;
        malloc;
        bind #r;
        push #r;
        store;
        malloc;
        bind #l;
        push #l;
        store;
        malloc;
        bind #v;
        push #v;
        store;
        malloc;
        bind #c;
        push #c;
        store;
        push #r;
        load;
        push #c;
        load;
        push #v;
        load;
        push #l;
        load;
        call]
        );
      malloc;
      bind #after;
      push #after;
      store;
      malloc;
      bind #l;
      push #l;
      store;
      malloc;
      bind #v;
      push #v;
      store;
      malloc;
      bind #c;
      push #c;
      store;
      pop;
      push #after;
      load;
      push 0;
      malloc;
      push #c;
      load;
      push #c;
      load;
      push #v;
      load;
      push #l;
      load;
      call]);
    unbind;
    pop;
    malloc;
    bind #r;
    push #r;
    store;
    malloc;
    bind #l;
    push #l;
    store;
    malloc;
    bind #v;
    push #v;
    store;
    malloc;
    bind #c;
    push #c;
    store;
    push #r;
    load;
    push #c;
    load;
    push #v;
    load;
    push #l;
    load;
    call]
    ), Env =
    []]

