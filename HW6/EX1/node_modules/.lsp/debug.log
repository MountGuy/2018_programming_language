Hello from /home/mountguy/.vscode/extensions/jaredly.reason-vscode-1.3.0/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","refmt":"","lispRefmt":"","format_width":"80","per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","languageId":"ocaml","version":1,"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":44,"character":40},"end":{"line":44,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":48,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":48,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":48,"character":19},"end":{"line":48,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":54,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":55,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0112056732178ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":67,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":79,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":81,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.272035598755ms
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":78,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":10,"character":55}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":147},"end":{"line":46,"character":147}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":2},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC;  Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 15, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0171661376953ms
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":3},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; S Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 17, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":149},"end":{"line":46,"character":149}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":4},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; So Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":6},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sona Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":46,"character":149},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":8},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 20, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":9},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata. Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":46,"character":155},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 22, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":155},"end":{"line":46,"character":155}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0169277191162ms
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":10},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.U Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 25, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":156},"end":{"line":46,"character":156}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":15},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 27, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":161},"end":{"line":46,"character":161}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0169277191162ms
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":17},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND;  Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0112056732178ms
Sending response {"id": 30, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0171661376953ms
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":18},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND; S Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 32, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":164},"end":{"line":46,"character":164}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0162124633789ms
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":19},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND; So Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":22},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND; Sonta Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 35, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":168},"end":{"line":46,"character":168}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":24},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND; Son Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 38, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":166},"end":{"line":46,"character":166}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":25},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND; Sona Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":27},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND; Sonata Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 40, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":169},"end":{"line":46,"character":169}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0169277191162ms
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":28},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND; Sonata. Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"position":{"line":46,"character":170},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0150203704834ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 44, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":170},"end":{"line":46,"character":170}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 45, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":31},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND; Sonata.POP Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 46, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":173},"end":{"line":46,"character":173}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0162124633789ms
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":32},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND; Sonata.POP; Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 49, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"range":{"start":{"line":46,"character":174},"end":{"line":46,"character":174}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0171661376953ms
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml"},"options":{"tabSize":4,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00786781311035ms
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":32},"contentChanges":[{"text":"(*\n * SNU 4190.310 Programming Languages \n * Homework \"Rozetta\" Skeleton\n *)\n\n let trans_v : Sm5.value -> Sonata.value = function\n | Sm5.Z z  -> Sonata.Z z\n | Sm5.B b  -> Sonata.B b\n | Sm5.L _ -> raise (Sonata.Error \"Invalid input program : pushing location\")\n | Sm5.Unit -> Sonata.Unit\n | Sm5.R _ -> raise (Sonata.Error \"Invalid input program : pushing record\")\n\n(* TODO : complete this function *)\nlet rec trans_obj : Sm5.obj -> Sonata.obj = function\n | Sm5.Val v -> Sonata.Val (trans_v v)\n | Sm5.Id id -> Sonata.Id id\n | Sm5.Fn (arg, command) -> Sonata.Fn (arg, \n   [Sonata.MALLOC;\n   Sonata.BIND \"#after\";\n   Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.STORE;] @\n   (trans' command) @ \n   [Sonata.PUSH(Sonata.Id(\"#after\"));\n   Sonata.LOAD;\n   Sonata.UNBIND;\n   Sonata.POP;\n   Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n   Sonata.MALLOC;\n   Sonata.CALL;\n   ])\n\n(* TODO : complete this function *)\nand trans' : Sm5.command -> Sonata.command = function\n | Sm5.PUSH obj :: cmds -> Sonata.PUSH (trans_obj obj) :: (trans' cmds)\n | Sm5.POP :: cmds -> Sonata.POP :: (trans' cmds)\n | Sm5.STORE :: cmds -> Sonata.STORE :: (trans' cmds)\n | Sm5.LOAD :: cmds -> Sonata.LOAD :: (trans' cmds)\n | Sm5.JTR (c1, c2) :: cmds -> Sonata.JTR(trans' c1, trans' c2) :: (trans' cmds)\n | Sm5.MALLOC :: cmds -> Sonata.MALLOC :: (trans' cmds)\n | Sm5.BOX z :: cmds -> Sonata.BOX z :: (trans' cmds)\n | Sm5.UNBOX id :: cmds -> Sonata.UNBOX id :: (trans' cmds)\n | Sm5.BIND id :: cmds -> Sonata.BIND id :: (trans' cmds)\n | Sm5.UNBIND :: cmds -> Sonata.UNBIND :: (trans' cmds)\n | Sm5.GET ::cmds -> Sonata.GET :: (trans' cmds)\n | Sm5.PUT ::cmds -> Sonata.PUT :: (trans' cmds)\n | Sm5.CALL :: cmds -> \n     Sonata.PUSH(Sonata.Fn(\"@\", (trans' cmds) @ [Sonata.PUSH(Sonata.Id(\"#after\")); Sonata.LOAD;Sonata.PUSH(Sonata.Val(Sonata.Z(0))); Sonata.MALLOC; Sonata.UNBIND; Sonata.POP; Sonata.CALL]))::[\n     Sonata.MALLOC ; \n     Sonata.BIND \"#next\" ; \n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#l\" ; \n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#v\" ; \n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.STORE ;\n\n     Sonata.MALLOC ; \n     Sonata.BIND \"#call\" ; \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.STORE ;\n\n     Sonata.PUSH(Sonata.Id(\"#next\")) ;\n     Sonata.LOAD ;\n     \n     Sonata.PUSH(Sonata.Id(\"#call\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#v\")) ;\n     Sonata.LOAD ;\n     Sonata.PUSH(Sonata.Id(\"#l\")) ;\n     Sonata.LOAD ;\n\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     Sonata.UNBIND;\n     Sonata.POP;\n     \n     Sonata.CALL]\n | Sm5.ADD :: cmds -> Sonata.ADD :: (trans' cmds)\n | Sm5.SUB :: cmds -> Sonata.SUB :: (trans' cmds)\n | Sm5.MUL :: cmds -> Sonata.MUL :: (trans' cmds)\n | Sm5.DIV :: cmds -> Sonata.DIV :: (trans' cmds)\n | Sm5.EQ :: cmds -> Sonata.EQ :: (trans' cmds)\n | Sm5.LESS :: cmds -> Sonata.LESS :: (trans' cmds)\n | Sm5.NOT :: cmds -> Sonata.NOT :: (trans' cmds)\n | [] -> []\n\n(* TODO : complete this function *)\nlet trans : Sm5.command -> Sonata.command = fun command ->\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n Sonata.MALLOC::\n Sonata.BIND(\"#after\")::\n Sonata.PUSH(Sonata.Id(\"#after\"))::\n Sonata.STORE::\n Sonata.PUSH(Sonata.Fn(\"#end\",[]))::\n [Sonata.PUSH(Sonata.Fn(\"#var\", trans' command));\n Sonata.PUSH(Sonata.Val(Sonata.Z(0)));\n Sonata.MALLOC;\n Sonata.CALL]  \n(*[Sonata.PUSH(Sonata.Fn(\"#ender\", []));\n ]*)\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/mountguy/Document/ProgrammingLanguage/HW6/EX1/rozetta.ml","version":32}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
